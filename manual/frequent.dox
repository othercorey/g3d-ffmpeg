/** @page frequent Frequently Asked Questions


# GL_INVALID_OPERATION

When you receive an assertion failure at runtime with the message `GL_INVALID_OPERATION`, that means that some OpenGL call returned `GL_INVALID_OPERATION`. The GL manual tells you what caused the invalid operation (the causes are different for each function). But first, you need to find the OpenGL call that triggered the problem. 

Run in debug mode and press Debug on that dialog. You'll see the debugAssertGLOK() call that triggered the assertion failure.

OpenGL calls are asynchronous. So it isn't necessarily the last OpenGL call before debugAssertGLOk that caused the problem. The actual OpenGL call at fault can be anywhere between the debugAssertGLOk that triggered and the previous one. We have debugAssertGLOk calls built in to the library at the calls that are most common for failure points. So, if there's a single GL call between debugAssertGLOk calls, then you know that is at fault. 

If you hit one of the less common points or are making GL calls in your application code, then you need to dig further. I use binary search in this case. Put some debugAssertGLOk calls bracketing sequences of OpenGL calls, rebuild, and then run again. When you know which section is problematic, you can dig further, until you've found the problem. Then, look at the GL manual page for that call and see what can trigger the error. The most common underlying problems are that GL was left in a bad state (something is bound or unbound unexpectedly) or that your GL version is old and G3D passed a new GL argument to it. You can check the OpenGL version that you're getting at run time in log.txt generated by G3D at initialization time. OpenGL 4.5 is what you should expect if you have recent drivers. G3D requires at least OpenGL 4.3.

![](debugAssertGLOk.png)

# Moving the Camera


Cameras are Entitys in G3D. They can have a fixed position, C++ code for moving them, an animation Track, or a Manipulator to allow interactive positioning. 

Scenes have multiple cameras. GApp always adds a "debugCamera" as well, which has a FirstPersonManipulator on it. You can switch to the debugging camera by pressing F2 or selecting it as the Active Camera in the SceneEditorWindow on the GUI.

Once the debugCamera is enabled, you can move using arrow keys and mouse or a gamepad using standard first-person video game controls.


# Create Meshes at Run Time

G3D has several layers of API (show in the API index), depending on whether you are focused on high-level behaviour or low-level graphics. The scene graph, using Entity and Model is at the highest level. At the lowest level, you can directly create your own VertexArrays and submit them with Shaders to RenderDevice.

To see how to create high-level meshes from data files at run time, look at the entity sample program, which creates Entitys at run time for the asteroids.

To see how to create low-level procedural geometry, look at the proceduralGeometry sample program.


# Build Errors

Error: `error MSB4019: The imported project "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\VC\VCTargets\Microsoft.Cpp.Default.props" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.`

Solution: Run the Visual Studio IDE, sign in, open the G3D.sln file, and install the optional components that Visual Studio recommends.


*/
