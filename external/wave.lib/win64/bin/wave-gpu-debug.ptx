//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-27506705
// Cuda compilation tools, release 10.2, V10.2.89
// Based on LLVM 3.4svn
//

.version 6.5
.target sm_30
.address_size 64

	// .globl	_Z9intersectv
.global .align 1 .b8 rayOriginBuffer[1];
.global .align 1 .b8 rayDirectionBuffer[1];
.global .align 4 .b8 root[4];
.global .align 8 .b8 launch_index[8];
.global .align 4 .u32 backfaceCull;
.global .align 4 .u32 alphaTest;
.global .align 4 .u32 lod;
.global .align 4 .u32 visibilityMask;
.global .align 4 .f32 partialCoverageThreshold;
.global .align 1 .b8 hitOutBuffer[1];
.global .align 1 .b8 material0OutBuffer[1];
.global .align 1 .b8 material1OutBuffer[1];
.global .align 1 .b8 material2OutBuffer[1];
.global .align 1 .b8 material3OutBuffer[1];
.global .align 1 .b8 hitLocationOutBuffer[1];
.global .align 1 .b8 shadingNormalOutBuffer[1];
.global .align 1 .b8 positionOutBuffer[1];
.global .align 1 .b8 rayConeAnglesBuffer[1];
.global .align 1 .b8 vertexPosition[1];
.global .align 1 .b8 vertexTexcoord[1];
.global .align 1 .b8 vertexNormal[1];
.global .align 1 .b8 vertexTangent[1];
.global .align 1 .b8 geometryIndex[1];
.global .align 4 .u32 twoSided;
.global .align 8 .b8 hit_attr[16];
.global .align 4 .b8 ray[36];
.global .align 4 .u32 texNSampler;
.global .align 4 .u32 tex0Sampler;
.global .align 4 .u32 tex1Sampler;
.global .align 4 .u32 tex2Sampler;
.global .align 4 .u32 tex3Sampler;
.global .align 16 .b8 texNScale[16];
.global .align 16 .b8 texNBias[16];
.global .align 16 .b8 tex0Scale[16];
.global .align 16 .b8 tex0Bias[16];
.global .align 16 .b8 tex1Scale[16];
.global .align 16 .b8 tex1Bias[16];
.global .align 16 .b8 tex2Scale[16];
.global .align 16 .b8 tex2Bias[16];
.global .align 16 .b8 tex3Scale[16];
.global .align 16 .b8 tex3Bias[16];
.global .align 4 .u32 flags;
.global .align 4 .f32 constant;
.global .align 8 .b8 hit_prd[16];
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12launch_indexE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12backfaceCullE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9alphaTestE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3lodE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14visibilityMaskE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo24partialCoverageThresholdE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8twoSidedE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8hit_attrE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11texNSamplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11tex0SamplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11tex1SamplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11tex2SamplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11tex3SamplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9texNScaleE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8texNBiasE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9tex0ScaleE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tex0BiasE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9tex1ScaleE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tex1BiasE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9tex2ScaleE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tex2BiasE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9tex3ScaleE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tex3BiasE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo5flagsE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8constantE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7hit_prdE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 1 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename12launch_indexE[6] = {117, 105, 110, 116, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_typename12backfaceCullE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename9alphaTestE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3lodE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename14visibilityMaskE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename24partialCoverageThresholdE[6] = {102, 108, 111, 97, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8twoSidedE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8hit_attrE[4] = {72, 105, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_typename11texNSamplerE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename11tex0SamplerE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename11tex1SamplerE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename11tex2SamplerE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename11tex3SamplerE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename9texNScaleE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8texNBiasE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename9tex0ScaleE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8tex0BiasE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename9tex1ScaleE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8tex1BiasE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename9tex2ScaleE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8tex2BiasE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename9tex3ScaleE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8tex3BiasE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename5flagsE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8constantE[6] = {102, 108, 111, 97, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename7hit_prdE[4] = {72, 105, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12launch_indexE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12backfaceCullE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9alphaTestE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3lodE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14visibilityMaskE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum24partialCoverageThresholdE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8twoSidedE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8hit_attrE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11texNSamplerE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11tex0SamplerE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11tex1SamplerE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11tex2SamplerE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11tex3SamplerE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9texNScaleE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8texNBiasE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9tex0ScaleE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tex0BiasE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9tex1ScaleE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tex1BiasE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9tex2ScaleE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tex2BiasE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9tex3ScaleE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tex3BiasE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum5flagsE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8constantE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7hit_prdE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12launch_indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic12backfaceCullE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9alphaTestE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic3lodE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14visibilityMaskE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic24partialCoverageThresholdE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8twoSidedE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8hit_attrE[19] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 104, 105, 116, 95, 97, 116, 116, 114, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic11texNSamplerE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11tex0SamplerE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11tex1SamplerE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11tex2SamplerE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11tex3SamplerE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9texNScaleE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8texNBiasE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9tex0ScaleE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tex0BiasE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9tex1ScaleE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tex1BiasE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9tex2ScaleE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tex2BiasE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9tex3ScaleE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tex3BiasE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic5flagsE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8constantE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7hit_prdE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12launch_indexE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12backfaceCullE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9alphaTestE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3lodE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14visibilityMaskE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation24partialCoverageThresholdE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8twoSidedE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8hit_attrE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11texNSamplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11tex0SamplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11tex1SamplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11tex2SamplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11tex3SamplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9texNScaleE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8texNBiasE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9tex0ScaleE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tex0BiasE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9tex1ScaleE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tex1BiasE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9tex2ScaleE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tex2BiasE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9tex3ScaleE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tex3BiasE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation5flagsE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8constantE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7hit_prdE[1];

.visible .entry _Z9intersectv(

)
{
	.reg .f32 	%f<3>;
	.reg .b32 	%r<2>;


	// inline asm
	call (%r1), _rt_get_primitive_index, ();
	// inline asm
	st.global.u32 	[hit_attr], %r1;
	// inline asm
	call (%f1, %f2), _rt_get_triangle_barycentrics, ();
	// inline asm
	st.global.v2.f32 	[hit_attr+8], {%f1, %f2};
	ret;
}

	// .globl	_Z10closestHitv
.visible .entry _Z10closestHitv(

)
{
	.reg .pred 	%p<8>;
	.reg .b16 	%rs<13>;
	.reg .f32 	%f<303>;
	.reg .b32 	%r<122>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<125>;


	ld.global.s32 	%rd6, [hit_attr];
	mov.u64 	%rd58, geometryIndex;
	cvta.global.u64 	%rd5, %rd58;
	mov.u32 	%r19, 1;
	mov.u32 	%r20, 12;
	mov.u64 	%rd57, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r19, %r20, %rd6, %rd57, %rd57, %rd57);
	// inline asm
	ld.s32 	%rd42, [%rd4];
	mov.u64 	%rd59, vertexPosition;
	cvta.global.u64 	%rd11, %rd59;
	ld.s32 	%rd30, [%rd4+4];
	ld.s32 	%rd36, [%rd4+8];
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r19, %r20, %rd42, %rd57, %rd57, %rd57);
	// inline asm
	ld.f32 	%f33, [%rd10];
	ld.f32 	%f34, [%rd10+4];
	ld.f32 	%f35, [%rd10+8];
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd11, %r19, %r20, %rd30, %rd57, %rd57, %rd57);
	// inline asm
	ld.f32 	%f36, [%rd16];
	ld.f32 	%f37, [%rd16+4];
	ld.f32 	%f38, [%rd16+8];
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd11, %r19, %r20, %rd36, %rd57, %rd57, %rd57);
	// inline asm
	ld.f32 	%f39, [%rd22];
	ld.f32 	%f40, [%rd22+4];
	ld.f32 	%f41, [%rd22+8];
	ld.global.v2.f32 	{%f42, %f43}, [hit_attr+8];
	ld.global.v2.u32 	{%r26, %r27}, [hit_attr];
	ld.global.v2.u32 	{%r30, %r31}, [hit_attr+8];
	st.global.v2.u32 	[hit_prd], {%r26, %r27};
	st.global.v2.u32 	[hit_prd+8], {%r30, %r31};
	mul.f32 	%f44, %f39, %f43;
	mul.f32 	%f45, %f40, %f43;
	mul.f32 	%f46, %f41, %f43;
	fma.rn.f32 	%f47, %f36, %f42, %f44;
	fma.rn.f32 	%f48, %f37, %f42, %f45;
	fma.rn.f32 	%f49, %f38, %f42, %f46;
	mov.f32 	%f302, 0f3F800000;
	sub.f32 	%f50, %f302, %f42;
	sub.f32 	%f51, %f50, %f43;
	fma.rn.f32 	%f21, %f33, %f51, %f47;
	fma.rn.f32 	%f22, %f34, %f51, %f48;
	fma.rn.f32 	%f23, %f35, %f51, %f49;
	mov.u32 	%r14, 3841;
	// inline asm
	call (%f17, %f18, %f19, %f20), _rt_transform_tuple, (%r14, %f21, %f22, %f23, %f302);
	// inline asm
	div.rn.f32 	%f3, %f17, %f20;
	div.rn.f32 	%f4, %f18, %f20;
	div.rn.f32 	%f5, %f19, %f20;
	ld.global.u32 	%r1, [lod];
	mov.u64 	%rd60, vertexNormal;
	cvta.global.u64 	%rd29, %rd60;
	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd29, %r19, %r20, %rd30, %rd57, %rd57, %rd57);
	// inline asm
	ld.f32 	%f52, [%rd28];
	ld.f32 	%f53, [%rd28+4];
	ld.f32 	%f54, [%rd28+8];
	// inline asm
	call (%rd34), _rt_buffer_get_64, (%rd29, %r19, %r20, %rd36, %rd57, %rd57, %rd57);
	// inline asm
	ld.f32 	%f55, [%rd34];
	mul.f32 	%f56, %f43, %f55;
	ld.f32 	%f57, [%rd34+4];
	mul.f32 	%f58, %f43, %f57;
	ld.f32 	%f59, [%rd34+8];
	mul.f32 	%f60, %f43, %f59;
	fma.rn.f32 	%f61, %f42, %f52, %f56;
	fma.rn.f32 	%f62, %f42, %f53, %f58;
	fma.rn.f32 	%f63, %f42, %f54, %f60;
	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd29, %r19, %r20, %rd42, %rd57, %rd57, %rd57);
	// inline asm
	ld.f32 	%f64, [%rd40];
	ld.f32 	%f65, [%rd40+4];
	ld.f32 	%f66, [%rd40+8];
	fma.rn.f32 	%f29, %f51, %f64, %f61;
	fma.rn.f32 	%f30, %f51, %f65, %f62;
	fma.rn.f32 	%f31, %f51, %f66, %f63;
	mov.u32 	%r21, 7937;
	mov.f32 	%f32, 0f00000000;
	// inline asm
	call (%f25, %f26, %f27, %f28), _rt_transform_tuple, (%r21, %f29, %f30, %f31, %f32);
	// inline asm
	mul.f32 	%f67, %f26, %f26;
	fma.rn.f32 	%f68, %f25, %f25, %f67;
	fma.rn.f32 	%f69, %f27, %f27, %f68;
	sqrt.rn.f32 	%f70, %f69;
	rcp.rn.f32 	%f71, %f70;
	mul.f32 	%f6, %f25, %f71;
	mul.f32 	%f7, %f26, %f71;
	mul.f32 	%f8, %f27, %f71;
	ld.global.v2.u32 	{%r34, %r35}, [launch_index];
	cvt.u64.u32	%rd48, %r34;
	cvt.u64.u32	%rd49, %r35;
	mov.u64 	%rd61, rayConeAnglesBuffer;
	cvta.global.u64 	%rd47, %rd61;
	mov.u32 	%r24, 2;
	mov.u32 	%r23, 4;
	// inline asm
	call (%rd46), _rt_buffer_get_64, (%rd47, %r24, %r23, %rd48, %rd49, %rd57, %rd57);
	// inline asm
	ld.global.f32 	%f72, [ray];
	sub.f32 	%f73, %f3, %f72;
	ld.global.f32 	%f74, [ray+4];
	sub.f32 	%f75, %f4, %f74;
	ld.global.f32 	%f76, [ray+8];
	sub.f32 	%f77, %f5, %f76;
	mul.f32 	%f78, %f75, %f75;
	fma.rn.f32 	%f79, %f73, %f73, %f78;
	fma.rn.f32 	%f80, %f77, %f77, %f79;
	sqrt.rn.f32 	%f81, %f80;
	ld.f32 	%f82, [%rd46];
	mul.f32 	%f83, %f82, %f81;
	ld.global.v2.u32 	{%r38, %r39}, [launch_index];
	cvt.u64.u32	%rd54, %r38;
	cvt.u64.u32	%rd55, %r39;
	mov.u64 	%rd62, rayDirectionBuffer;
	cvta.global.u64 	%rd53, %rd62;
	mov.u32 	%r25, 16;
	// inline asm
	call (%rd52), _rt_buffer_get_64, (%rd53, %r24, %r25, %rd54, %rd55, %rd57, %rd57);
	// inline asm
	ld.v4.f32 	{%f84, %f85, %f86, %f87}, [%rd52];
	mul.f32 	%f91, %f7, %f85;
	fma.rn.f32 	%f92, %f6, %f84, %f91;
	fma.rn.f32 	%f93, %f8, %f86, %f92;
	cvt.f64.f32	%fd1, %f93;
	abs.f64 	%fd2, %fd1;
	cvt.rn.f32.f64	%f94, %fd2;
	mov.f32 	%f95, 0f358637BD;
	max.f32 	%f96, %f94, %f95;
	rcp.rn.f32 	%f97, %f96;
	mul.f32 	%f98, %f83, %f97;
	setp.lt.f32	%p1, %f98, 0f00800000;
	mul.f32 	%f99, %f98, 0f4B000000;
	selp.f32	%f9, %f99, %f98, %p1;
	selp.f32	%f100, 0fC1B80000, 0f00000000, %p1;
	mov.b32 	 %r42, %f9;
	add.s32 	%r43, %r42, -1059760811;
	and.b32  	%r44, %r43, -8388608;
	sub.s32 	%r45, %r42, %r44;
	mov.b32 	 %f101, %r45;
	cvt.rn.f32.s32	%f102, %r44;
	mov.f32 	%f103, 0f34000000;
	fma.rn.f32 	%f104, %f102, %f103, %f100;
	add.f32 	%f105, %f101, 0fBF800000;
	mov.f32 	%f106, 0f3E1039F6;
	mov.f32 	%f107, 0fBE055027;
	fma.rn.f32 	%f108, %f107, %f105, %f106;
	mov.f32 	%f109, 0fBDF8CDCC;
	fma.rn.f32 	%f110, %f108, %f105, %f109;
	mov.f32 	%f111, 0f3E0F2955;
	fma.rn.f32 	%f112, %f110, %f105, %f111;
	mov.f32 	%f113, 0fBE2AD8B9;
	fma.rn.f32 	%f114, %f112, %f105, %f113;
	mov.f32 	%f115, 0f3E4CED0B;
	fma.rn.f32 	%f116, %f114, %f105, %f115;
	mov.f32 	%f117, 0fBE7FFF22;
	fma.rn.f32 	%f118, %f116, %f105, %f117;
	mov.f32 	%f119, 0f3EAAAA78;
	fma.rn.f32 	%f120, %f118, %f105, %f119;
	mov.f32 	%f121, 0fBF000000;
	fma.rn.f32 	%f122, %f120, %f105, %f121;
	mul.f32 	%f123, %f105, %f122;
	fma.rn.f32 	%f124, %f123, %f105, %f105;
	mov.f32 	%f125, 0f3F317218;
	fma.rn.f32 	%f300, %f104, %f125, %f124;
	setp.lt.u32	%p2, %r42, 2139095040;
	@%p2 bra 	BB1_2;

	mov.f32 	%f126, 0f7F800000;
	fma.rn.f32 	%f300, %f9, %f126, %f126;

BB1_2:
	setp.eq.f32	%p3, %f9, 0f00000000;
	selp.f32	%f128, 0fFF800000, %f300, %p3;
	cvt.rn.f32.s32	%f129, %r1;
	add.f32 	%f130, %f129, %f128;
	cvt.rzi.s32.f32	%r2, %f130;
	ld.global.u32 	%r121, [twoSided];
	setp.ne.s32	%p4, %r121, 0;
	mov.f32 	%f301, %f302;
	@%p4 bra 	BB1_4;

	// inline asm
	call (%r46), _rt_is_triangle_hit_front_face, ();
	// inline asm
	setp.ne.s32	%p5, %r46, 0;
	selp.f32	%f301, 0f3F800000, 0f00000000, %p5;
	ld.global.u32 	%r121, [twoSided];

BB1_4:
	setp.eq.s32	%p6, %r121, 0;
	@%p6 bra 	BB1_6;

	// inline asm
	call (%r47), _rt_is_triangle_hit_front_face, ();
	// inline asm
	setp.eq.s32	%p7, %r47, 0;
	selp.f32	%f302, 0fBF800000, 0f3F800000, %p7;

BB1_6:
	mov.u32 	%r120, 4;
	mov.f32 	%f299, 0f00000000;
	mov.f32 	%f298, 0f3F800000;
	sub.f32 	%f297, %f298, %f42;
	sub.f32 	%f296, %f297, %f43;
	mov.u32 	%r119, 1;
	mov.u64 	%rd124, 0;
	mov.u32 	%r118, 16;
	mov.u32 	%r117, 2;
	ld.global.v2.u32 	{%r81, %r82}, [launch_index];
	mov.u32 	%r78, 0;
	cvt.u64.u32	%rd65, %r81;
	cvt.u64.u32	%rd66, %r82;
	mov.u64 	%rd117, positionOutBuffer;
	cvta.global.u64 	%rd64, %rd117;
	// inline asm
	call (%rd63), _rt_buffer_get_64, (%rd64, %r117, %r118, %rd65, %rd66, %rd124, %rd124);
	// inline asm
	st.v4.f32 	[%rd63], {%f3, %f4, %f5, %f298};
	mov.u64 	%rd118, vertexTexcoord;
	cvta.global.u64 	%rd70, %rd118;
	mov.u32 	%r55, 8;
	// inline asm
	call (%rd69), _rt_buffer_get_64, (%rd70, %r119, %r55, %rd30, %rd124, %rd124, %rd124);
	// inline asm
	ld.v2.f32 	{%f173, %f174}, [%rd69];
	// inline asm
	call (%rd75), _rt_buffer_get_64, (%rd70, %r119, %r55, %rd36, %rd124, %rd124, %rd124);
	// inline asm
	ld.v2.f32 	{%f177, %f178}, [%rd75];
	mul.f32 	%f181, %f43, %f177;
	mul.f32 	%f182, %f43, %f178;
	fma.rn.f32 	%f183, %f42, %f173, %f181;
	fma.rn.f32 	%f184, %f42, %f174, %f182;
	// inline asm
	call (%rd81), _rt_buffer_get_64, (%rd70, %r119, %r55, %rd42, %rd124, %rd124, %rd124);
	// inline asm
	ld.v2.f32 	{%f185, %f186}, [%rd81];
	fma.rn.f32 	%f136, %f296, %f185, %f183;
	fma.rn.f32 	%f137, %f296, %f186, %f184;
	ld.global.u32 	%r56, [texNSampler];
	cvt.rn.f32.s32	%f171, %r2;
	// inline asm
	call (%f132, %f133, %f134, %f135), _rt_texture_get_level_id, (%r56, %r117, %f136, %f137, %f299, %r78, %f171);
	// inline asm
	ld.global.v2.u32 	{%r85, %r86}, [launch_index];
	cvt.u64.u32	%rd89, %r85;
	cvt.u64.u32	%rd90, %r86;
	mov.u64 	%rd119, material0OutBuffer;
	cvta.global.u64 	%rd88, %rd119;
	// inline asm
	call (%rd87), _rt_buffer_get_64, (%rd88, %r117, %r120, %rd89, %rd90, %rd124, %rd124);
	// inline asm
	ld.global.u32 	%r61, [tex0Sampler];
	// inline asm
	call (%f140, %f141, %f142, %f143), _rt_texture_get_level_id, (%r61, %r117, %f136, %f137, %f299, %r78, %f171);
	// inline asm
	ld.global.v4.f32 	{%f191, %f192, %f193, %f194}, [tex0Scale];
	ld.global.v4.f32 	{%f199, %f200, %f201, %f202}, [tex0Bias];
	fma.rn.f32 	%f207, %f140, %f191, %f199;
	fma.rn.f32 	%f208, %f141, %f192, %f200;
	fma.rn.f32 	%f209, %f142, %f193, %f201;
	fma.rn.f32 	%f210, %f143, %f194, %f202;
	cvt.sat.f32.f32	%f211, %f207;
	mul.f32 	%f212, %f211, 0f437FFD71;
	cvt.rzi.u32.f32	%r89, %f212;
	cvt.sat.f32.f32	%f213, %f208;
	mul.f32 	%f214, %f213, 0f437FFD71;
	cvt.rzi.u32.f32	%r90, %f214;
	cvt.sat.f32.f32	%f215, %f209;
	mul.f32 	%f216, %f215, 0f437FFD71;
	cvt.rzi.u32.f32	%r91, %f216;
	cvt.sat.f32.f32	%f217, %f210;
	mul.f32 	%f218, %f217, 0f437FFD71;
	cvt.rzi.u32.f32	%r92, %f218;
	cvt.u16.u32	%rs1, %r92;
	cvt.u16.u32	%rs2, %r91;
	cvt.u16.u32	%rs3, %r90;
	cvt.u16.u32	%rs4, %r89;
	st.v4.u8 	[%rd87], {%rs4, %rs3, %rs2, %rs1};
	ld.global.v2.u32 	{%r93, %r94}, [launch_index];
	cvt.u64.u32	%rd95, %r93;
	cvt.u64.u32	%rd96, %r94;
	mov.u64 	%rd120, material1OutBuffer;
	cvta.global.u64 	%rd94, %rd120;
	// inline asm
	call (%rd93), _rt_buffer_get_64, (%rd94, %r117, %r120, %rd95, %rd96, %rd124, %rd124);
	// inline asm
	ld.global.u32 	%r66, [tex1Sampler];
	// inline asm
	call (%f148, %f149, %f150, %f151), _rt_texture_get_level_id, (%r66, %r117, %f136, %f137, %f299, %r78, %f171);
	// inline asm
	ld.global.v4.f32 	{%f219, %f220, %f221, %f222}, [tex1Scale];
	ld.global.v4.f32 	{%f227, %f228, %f229, %f230}, [tex1Bias];
	fma.rn.f32 	%f235, %f148, %f219, %f227;
	fma.rn.f32 	%f236, %f149, %f220, %f228;
	fma.rn.f32 	%f237, %f150, %f221, %f229;
	fma.rn.f32 	%f238, %f151, %f222, %f230;
	cvt.sat.f32.f32	%f239, %f235;
	mul.f32 	%f240, %f239, 0f437FFD71;
	cvt.rzi.u32.f32	%r97, %f240;
	cvt.sat.f32.f32	%f241, %f236;
	mul.f32 	%f242, %f241, 0f437FFD71;
	cvt.rzi.u32.f32	%r98, %f242;
	cvt.sat.f32.f32	%f243, %f237;
	mul.f32 	%f244, %f243, 0f437FFD71;
	cvt.rzi.u32.f32	%r99, %f244;
	cvt.sat.f32.f32	%f245, %f238;
	mul.f32 	%f246, %f245, 0f437FFD71;
	cvt.rzi.u32.f32	%r100, %f246;
	cvt.u16.u32	%rs5, %r100;
	cvt.u16.u32	%rs6, %r99;
	cvt.u16.u32	%rs7, %r98;
	cvt.u16.u32	%rs8, %r97;
	st.v4.u8 	[%rd93], {%rs8, %rs7, %rs6, %rs5};
	ld.global.v2.u32 	{%r101, %r102}, [launch_index];
	cvt.u64.u32	%rd101, %r101;
	cvt.u64.u32	%rd102, %r102;
	mov.u64 	%rd121, material2OutBuffer;
	cvta.global.u64 	%rd100, %rd121;
	// inline asm
	call (%rd99), _rt_buffer_get_64, (%rd100, %r117, %r120, %rd101, %rd102, %rd124, %rd124);
	// inline asm
	ld.global.u32 	%r71, [tex2Sampler];
	// inline asm
	call (%f156, %f157, %f158, %f159), _rt_texture_get_level_id, (%r71, %r117, %f136, %f137, %f299, %r78, %f171);
	// inline asm
	ld.global.v4.f32 	{%f247, %f248, %f249, %f250}, [tex2Scale];
	ld.global.v4.f32 	{%f255, %f256, %f257, %f258}, [tex2Bias];
	fma.rn.f32 	%f263, %f156, %f247, %f255;
	fma.rn.f32 	%f264, %f157, %f248, %f256;
	fma.rn.f32 	%f265, %f158, %f249, %f257;
	fma.rn.f32 	%f266, %f159, %f250, %f258;
	cvt.sat.f32.f32	%f267, %f263;
	mul.f32 	%f268, %f267, 0f437FFD71;
	cvt.rzi.u32.f32	%r105, %f268;
	cvt.sat.f32.f32	%f269, %f264;
	mul.f32 	%f270, %f269, 0f437FFD71;
	cvt.rzi.u32.f32	%r106, %f270;
	cvt.sat.f32.f32	%f271, %f265;
	mul.f32 	%f272, %f271, 0f437FFD71;
	cvt.rzi.u32.f32	%r107, %f272;
	cvt.sat.f32.f32	%f273, %f266;
	mul.f32 	%f274, %f273, 0f437FFD71;
	cvt.rzi.u32.f32	%r108, %f274;
	cvt.u16.u32	%rs9, %r108;
	cvt.u16.u32	%rs10, %r107;
	cvt.u16.u32	%rs11, %r106;
	cvt.u16.u32	%rs12, %r105;
	st.v4.u8 	[%rd99], {%rs12, %rs11, %rs10, %rs9};
	ld.global.v2.u32 	{%r109, %r110}, [launch_index];
	cvt.u64.u32	%rd107, %r109;
	cvt.u64.u32	%rd108, %r110;
	mov.u64 	%rd122, material3OutBuffer;
	cvta.global.u64 	%rd106, %rd122;
	// inline asm
	call (%rd105), _rt_buffer_get_64, (%rd106, %r117, %r118, %rd107, %rd108, %rd124, %rd124);
	// inline asm
	ld.global.u32 	%r76, [tex3Sampler];
	// inline asm
	call (%f164, %f165, %f166, %f167), _rt_texture_get_level_id, (%r76, %r117, %f136, %f137, %f299, %r78, %f171);
	// inline asm
	ld.global.v4.f32 	{%f275, %f276, %f277, %f278}, [tex3Scale];
	ld.global.v4.f32 	{%f282, %f283, %f284, %f285}, [tex3Bias];
	fma.rn.f32 	%f289, %f166, %f277, %f284;
	fma.rn.f32 	%f290, %f165, %f276, %f283;
	fma.rn.f32 	%f291, %f164, %f275, %f282;
	ld.global.f32 	%f292, [constant];
	st.v4.f32 	[%rd105], {%f291, %f290, %f289, %f292};
	ld.global.v2.u32 	{%r113, %r114}, [launch_index];
	cvt.u64.u32	%rd113, %r113;
	cvt.u64.u32	%rd114, %r114;
	mov.u64 	%rd123, shadingNormalOutBuffer;
	cvta.global.u64 	%rd112, %rd123;
	// inline asm
	call (%rd111), _rt_buffer_get_64, (%rd112, %r117, %r118, %rd113, %rd114, %rd124, %rd124);
	// inline asm
	mul.f32 	%f293, %f8, %f302;
	mul.f32 	%f294, %f7, %f302;
	mul.f32 	%f295, %f6, %f302;
	st.v4.f32 	[%rd111], {%f295, %f294, %f293, %f301};
	ret;
}

	// .globl	_Z19occlusionClosestHitv
.visible .entry _Z19occlusionClosestHitv(

)
{
	.reg .b32 	%r<9>;


	ld.global.v2.u32 	{%r1, %r2}, [hit_attr];
	ld.global.v2.u32 	{%r5, %r6}, [hit_attr+8];
	st.global.v2.u32 	[hit_prd], {%r1, %r2};
	st.global.v2.u32 	[hit_prd+8], {%r5, %r6};
	ret;
}

	// .globl	_Z6anyHitv
.visible .entry _Z6anyHitv(

)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<36>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<27>;


	ld.global.s32 	%rd3, [hit_attr];
	mov.u64 	%rd25, geometryIndex;
	cvta.global.u64 	%rd2, %rd25;
	mov.u32 	%r7, 1;
	mov.u32 	%r2, 12;
	mov.u64 	%rd24, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r7, %r2, %rd3, %rd24, %rd24, %rd24);
	// inline asm
	ld.global.v2.f32 	{%f10, %f11}, [hit_attr+8];
	mov.u32 	%r11, 0;
	ld.global.u32 	%r12, [lod];
	ld.s32 	%rd9, [%rd1+4];
	mov.u64 	%rd26, vertexTexcoord;
	cvta.global.u64 	%rd8, %rd26;
	mov.u32 	%r8, 8;
	ld.s32 	%rd15, [%rd1+8];
	ld.s32 	%rd21, [%rd1];
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd8, %r7, %r8, %rd9, %rd24, %rd24, %rd24);
	// inline asm
	ld.v2.f32 	{%f14, %f15}, [%rd7];
	// inline asm
	call (%rd13), _rt_buffer_get_64, (%rd8, %r7, %r8, %rd15, %rd24, %rd24, %rd24);
	// inline asm
	ld.v2.f32 	{%f18, %f19}, [%rd13];
	mul.f32 	%f22, %f11, %f18;
	mul.f32 	%f23, %f11, %f19;
	fma.rn.f32 	%f24, %f10, %f14, %f22;
	fma.rn.f32 	%f25, %f10, %f15, %f23;
	// inline asm
	call (%rd19), _rt_buffer_get_64, (%rd8, %r7, %r8, %rd21, %rd24, %rd24, %rd24);
	// inline asm
	mov.f32 	%f26, 0f3F800000;
	sub.f32 	%f27, %f26, %f10;
	sub.f32 	%f28, %f27, %f11;
	ld.v2.f32 	{%f29, %f30}, [%rd19];
	fma.rn.f32 	%f6, %f28, %f29, %f24;
	fma.rn.f32 	%f7, %f28, %f30, %f25;
	ld.global.u32 	%r9, [tex0Sampler];
	cvt.rn.f32.s32	%f9, %r12;
	mov.u32 	%r10, 2;
	mov.f32 	%f8, 0f00000000;
	// inline asm
	call (%f2, %f3, %f4, %f5), _rt_texture_get_level_id, (%r9, %r10, %f6, %f7, %f8, %r11, %f9);
	// inline asm
	ld.global.f32 	%f33, [tex0Scale+12];
	ld.global.f32 	%f34, [tex0Bias+12];
	fma.rn.f32 	%f1, %f5, %f33, %f34;
	ld.global.u32 	%r13, [alphaTest];
	setp.eq.s32	%p1, %r13, 0;
	@%p1 bra 	BB3_3;

	ld.global.f32 	%f35, [partialCoverageThreshold];
	setp.geu.f32	%p2, %f1, %f35;
	setp.neu.f32	%p3, %f1, 0f00000000;
	and.pred  	%p4, %p2, %p3;
	@%p4 bra 	BB3_3;

	// inline asm
	call _rt_ignore_intersection, ();
	// inline asm

BB3_3:
	ret;
}

	// .globl	_Z4castv
.visible .entry _Z4castv(

)
{
	.local .align 8 .b8 	__local_depot4[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .f32 	%f<17>;
	.reg .b32 	%r<20>;
	.reg .b64 	%rd<17>;


	mov.u64 	%SPL, __local_depot4;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd13, %SP, 0;
	add.u64 	%rd14, %SPL, 0;
	mov.u32 	%r10, -1;
	st.local.u32 	[%rd14], %r10;
	ld.global.v2.u32 	{%r11, %r12}, [launch_index];
	mov.u32 	%r6, 0;
	cvt.u64.u32	%rd3, %r11;
	cvt.u64.u32	%rd4, %r12;
	mov.u64 	%rd15, rayDirectionBuffer;
	cvta.global.u64 	%rd2, %rd15;
	mov.u32 	%r3, 2;
	mov.u32 	%r9, 16;
	mov.u64 	%rd12, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r3, %r9, %rd3, %rd4, %rd12, %rd12);
	// inline asm
	ld.v4.f32 	{%f9, %f10, %f11, %f12}, [%rd1];
	ld.global.v2.u32 	{%r15, %r16}, [launch_index];
	cvt.u64.u32	%rd9, %r15;
	cvt.u64.u32	%rd10, %r16;
	mov.u64 	%rd16, rayOriginBuffer;
	cvta.global.u64 	%rd8, %rd16;
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd8, %r3, %r9, %rd9, %rd10, %rd12, %rd12);
	// inline asm
	ld.v4.f32 	{%f13, %f14, %f15, %f16}, [%rd7];
	ld.global.u32 	%r5, [root];
	ld.global.u32 	%r7, [visibilityMask];
	ld.global.u32 	%r19, [backfaceCull];
	setp.eq.s32	%p1, %r19, 0;
	selp.b32	%r8, 0, 16, %p1;
	// inline asm
	call _rt_trace_mask_flags_64, (%r5, %f13, %f14, %f15, %f9, %f10, %f11, %r6, %f16, %f12, %r7, %r8, %rd13, %r9);
	// inline asm
	ret;
}

	// .globl	_Z13occlusionCastv
.visible .entry _Z13occlusionCastv(

)
{
	.local .align 8 .b8 	__local_depot5[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<17>;
	.reg .b32 	%r<27>;
	.reg .b64 	%rd<24>;


	mov.u64 	%SPL, __local_depot5;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd13, %SP, 0;
	add.u64 	%rd20, %SPL, 0;
	mov.u32 	%r12, -1;
	st.local.u32 	[%rd20], %r12;
	ld.global.v2.u32 	{%r13, %r14}, [launch_index];
	mov.u32 	%r8, 0;
	mov.u32 	%r11, 1;
	cvt.u64.u32	%rd3, %r13;
	cvt.u64.u32	%rd4, %r14;
	mov.u64 	%rd21, rayDirectionBuffer;
	cvta.global.u64 	%rd2, %rd21;
	mov.u32 	%r10, 2;
	mov.u32 	%r9, 16;
	mov.u64 	%rd19, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r10, %r9, %rd3, %rd4, %rd19, %rd19);
	// inline asm
	ld.v4.f32 	{%f9, %f10, %f11, %f12}, [%rd1];
	ld.global.v2.u32 	{%r17, %r18}, [launch_index];
	cvt.u64.u32	%rd9, %r17;
	cvt.u64.u32	%rd10, %r18;
	mov.u64 	%rd22, rayOriginBuffer;
	cvta.global.u64 	%rd8, %rd22;
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd8, %r10, %r9, %rd9, %rd10, %rd19, %rd19);
	// inline asm
	ld.v4.f32 	{%f13, %f14, %f15, %f16}, [%rd7];
	ld.global.u32 	%r7, [visibilityMask];
	ld.global.u32 	%r5, [root];
	// inline asm
	call _rt_trace_mask_flags_64, (%r5, %f13, %f14, %f15, %f9, %f10, %f11, %r11, %f16, %f12, %r7, %r8, %rd13, %r9);
	// inline asm
	ld.local.u32 	%r21, [%rd20];
	shr.s32 	%r22, %r21, 31;
	cvt.u16.u32	%rs1, %r22;
	not.b16 	%rs2, %rs1;
	ld.global.v2.u32 	{%r23, %r24}, [launch_index];
	cvt.u64.u32	%rd16, %r23;
	cvt.u64.u32	%rd17, %r24;
	mov.u64 	%rd23, hitOutBuffer;
	cvta.global.u64 	%rd15, %rd23;
	// inline asm
	call (%rd14), _rt_buffer_get_64, (%rd15, %r10, %r11, %rd16, %rd17, %rd19, %rd19);
	// inline asm
	st.u8 	[%rd14], %rs2;
	ret;
}

	// .globl	_Z9exceptionv
.visible .entry _Z9exceptionv(

)
{
	.reg .b32 	%r<2>;


	// inline asm
	call (%r1), _rt_get_exception_code, ();
	// inline asm
	ret;
}

	// .globl	_Z4missv
.visible .entry _Z4missv(

)
{
	.reg .f32 	%f<4>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<22>;


	ld.global.v2.u32 	{%r7, %r8}, [launch_index];
	cvt.u64.u32	%rd3, %r7;
	cvt.u64.u32	%rd4, %r8;
	mov.u64 	%rd19, material3OutBuffer;
	cvta.global.u64 	%rd2, %rd19;
	mov.u32 	%r5, 2;
	mov.u32 	%r6, 16;
	mov.u64 	%rd18, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r5, %r6, %rd3, %rd4, %rd18, %rd18);
	// inline asm
	mov.f32 	%f1, 0fBF800000;
	mov.f32 	%f2, 0f00000000;
	st.v4.f32 	[%rd1], {%f2, %f2, %f2, %f1};
	ld.global.v2.u32 	{%r11, %r12}, [launch_index];
	cvt.u64.u32	%rd9, %r11;
	cvt.u64.u32	%rd10, %r12;
	mov.u64 	%rd20, shadingNormalOutBuffer;
	cvta.global.u64 	%rd8, %rd20;
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd8, %r5, %r6, %rd9, %rd10, %rd18, %rd18);
	// inline asm
	st.v4.f32 	[%rd7], {%f2, %f2, %f2, %f1};
	ld.global.v2.u32 	{%r15, %r16}, [launch_index];
	cvt.u64.u32	%rd15, %r15;
	cvt.u64.u32	%rd16, %r16;
	mov.u64 	%rd21, positionOutBuffer;
	cvta.global.u64 	%rd14, %rd21;
	// inline asm
	call (%rd13), _rt_buffer_get_64, (%rd14, %r5, %r6, %rd15, %rd16, %rd18, %rd18);
	// inline asm
	mov.f32 	%f3, 0f7F800000;
	st.v4.f32 	[%rd13], {%f2, %f2, %f2, %f3};
	ret;
}


