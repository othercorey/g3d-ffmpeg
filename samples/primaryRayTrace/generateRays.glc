#version 430
#ifdef GL_ARB_compute_variable_group_size
#extension GL_ARB_compute_variable_group_size : enable
#endif
#include <g3dmath.glsl>
#include <Camera/Camera.glsl>
#include <octahedral.glsl>

#expect PROJECTION_ALGORITHM "enum"
#define PLANAR          0
#define FISHEYE         1
#define LENSLET         2
#define PANNINI         3
#define OCTAHEDRAL      4
#define THIN_LENS       5
#define CUBE_MAP        6
#define ORTHOGRAPHIC    7

uniform Camera          camera;

uniform vec2            pixelOffset;


uniform float   focalLength;
uniform float   camToLens;
uniform float   fStop;

uniform float   FOVRadians;
uniform int     FOVDirection;
uniform float   FOVDistance;

uniform float   csProjectionOffset;
uniform float   verticalCompression;

uniform vec2     lensPoint;

layout(local_size_variable) in;

layout(rgba32f) uniform writeonly image2D rayOrigin;
layout(rgba32f) uniform writeonly image2D rayDirection;


// Generate a cubemap ray given an axis (in camera space), a pixel coord on the
// cubemap, the resolution of the face.
// All other parameters can be inferred. if the coordinate system is known.
vec3 generateCSCubeMapDirection(vec3 axis, vec2 cubeMapPixelCoord, vec2 resolution) {
    vec2 cubeMapPixelCenter = cubeMapPixelCoord + vec2(0.5f);
    cubeMapPixelCenter -= (resolution * 0.5);
    cubeMapPixelCenter *= 2.0f / resolution;

    vec3 dir = axis;
    if (axis.x == 0) {
        dir.x = cubeMapPixelCenter.x;
        if (axis.y == 0) {
            dir.y = cubeMapPixelCenter.y;
        } else {
            dir.z = cubeMapPixelCenter.y;
        }
    } else {
        dir.y = cubeMapPixelCenter.x;
        dir.z = cubeMapPixelCenter.y;
    }

    return normalize(dir);
}


void main() {
    float csEyeRayDirectionZ;
    Ray eyeRay;

    // These indices are out of bounds. If we don't clamp the x coordinate
    // it wraps around and overwrites subsequent lines. So return early.
    if (gl_GlobalInvocationID.x >= g3d_FragCoordExtent.x) {
        return;
    }

    // Declaring the max dist here allows projection algorithms to cast degenerate rays by
    // setting maxdistance = -1;
    float maxDist = inf;

    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

#   if PROJECTION_ALGORITHM == PLANAR

    float tanHalfAngle = tan(FOVRadians / 2.0);
    float aspectScale = ((FOVDirection == 0) ? g3d_FragCoordExtent.x : g3d_FragCoordExtent.y) / 2.0;

    vec2 pixel = vec2(gl_GlobalInvocationID.xy) + vec2(0.5f) - (g3d_FragCoordExtent.xy / 2.0);

    vec3 direction = normalize(vec3(vec2(pixel.x, -pixel.y) * tanHalfAngle / aspectScale, -1));


        //Ray CSRay = cameraRay(gl_GlobalInvocationID.xy, camera.projInfo);

        //eyeRay.origin = CSRay.origin + camera.frame[3];



        //mat3x3 rotation = {
        //vec3(-1,0,0),
        //vec3(0,1,0),
        //vec3(0,0,-1)
        //};
        eyeRay.origin = camera.frame[3];
        eyeRay.direction = camera.frame * vec4(direction, 0);

        //eyeRay = worldRay(vec2(gl_GlobalInvocationID.xy) + pixelOffset, camera.frame, camera.projInfo, csEyeRayDirectionZ);


#   elif PROJECTION_ALGORITHM == FISHEYE

	float clampedHalfFOV = min(FOVRadians, pi) / 2.0;

	vec2 angle = (gl_GlobalInvocationID.xy - g3d_FragCoordExtent / 2) * clampedHalfFOV;

	if (FOVDirection == 0) {
		// Fisheye - circle, 180 degree FOV horizontal
		angle /= (g3d_FragCoordExtent.x / 2);
	}
	else if (FOVDirection == 1) {
		// Fisheye - cropped circle, 180 degree FOV vertical
		angle /= (g3d_FragCoordExtent.y / 2);
	}
	else {
		// Fisheye - full frame, 180 degree FOV diagonal
		angle /= (length(g3d_FragCoordExtent) / 2);
	}

	vec3 dir;
	if (length(angle) > 0.5 * pi) {
		// TODO: G3D degenerate ray is: length(dir) == 0
		// wave.lib degenerate rays is: dir.w < 0.
		// So, we do both here, but wave.lib comes first. Weird things happen if wave.lib tries to cast a length(dir) == 0 ray...
		dir = vec3(0);
		maxDist = -1.0;
	}
	else {
		dir = normalize(vec3(sin(angle.x), -sin(angle.y) * cos(angle.x), -cos(angle.x) * cos(angle.y)));
	}

	eyeRay.direction = camera.frame * vec4(dir, 0);
	eyeRay.origin = camera.frame * vec4(0, 0, 0, 1);

#   elif PROJECTION_ALGORITHM == LENSLET
        const float NUM_LENSES = 12;
        const float BASELINE = 10;
        vec2 unitCoord = (gl_GlobalInvocationID.xy - g3d_FragCoordExtent / 2) / length(g3d_FragCoordExtent);
        float2 lensCenter = round(unitCoord * NUM_LENSES) / NUM_LENSES;
        float2 lensCoord = (unitCoord - lensCenter) * NUM_LENSES;
        vec2 angle = (FOVRadians / 2) * lensCoord;
        vec3 dir = normalize(vec3(tan(angle.x), -tan(angle.y), -1));
            //normalize(vec3(sin(angle.x), -sin(angle.y) * cos(angle.x), -cos(angle.x) * cos(angle.y)));
        eyeRay.direction = camera.frame * vec4(dir, 0);
        eyeRay.origin    = camera.frame * vec4(lensCenter * BASELINE, 0, 1);
#   elif PROJECTION_ALGORITHM == PANNINI

    ////////////// ANGLE TO COORDINATE //////////////
    //// Fisheye - full frame, 180 degree FOV diagonal
    //vec2 angle = (gl_GlobalInvocationID.xy - g3d_FragCoordExtent / 2) / length(g3d_FragCoordExtent);
    //angle *= pi;
    //float phi = angle.x;
    //float theta = angle.y;

    //float S = (d + 1) / (d + cos(phi));

    //float h = S * sin(phi);
    //float v = S * tan(theta);

    //vec3 dir = normalize(vec3(sin(angle.x), -sin(angle.y) * cos(angle.x), -cos(angle.x) * cos(angle.y)) - vec3(0,0,d));
    //
    //coord = ivec2(vec2(h, v) * (g3d_FragCoordExtent / 2) + (g3d_FragCoordExtent / 2));

    //// TODO: restore
    //// To each pixel, write the coordinates of where its thread is executing from.
    //eyeRay.direction = camera.frame * vec4(dir, 0);
    //eyeRay.origin = camera.frame * vec4(0,0, d, 1);

    ////////////// COORDINATE TO ANGLE //////////////

#define DERIVED 1

#if DERIVED
    vec2 halfFragCoordExtent = g3d_FragCoordExtent / 2.0;
    vec2 pixelCenterCoords = vec2(gl_GlobalInvocationID.xy) + vec2(0.5f) - (halfFragCoordExtent);

    float halfFOV = (FOVRadians / 2.0);

    float halfPanniniFOV = atan(sin(halfFOV), cos(halfFOV) + csProjectionOffset);

    vec2 hvPan = vec2(tan(halfPanniniFOV), tan(halfPanniniFOV)) * (1.0 + csProjectionOffset);


    if (FOVDirection == 0) {
        hvPan *= (pixelCenterCoords / (halfFragCoordExtent.x));
    }
    else if (FOVDirection == 1) {
        hvPan *= (pixelCenterCoords / (halfFragCoordExtent.y));
    }
    else {
        //Diagonal FOV
        hvPan *= (pixelCenterCoords / length(halfFragCoordExtent));
    }

    hvPan.x = atan(hvPan.x / (1.0 + csProjectionOffset));

    float d = csProjectionOffset;
    float M = sqrt(1 - square(sin(hvPan.x) * d)) + d * cos(hvPan.x);

    float xCoord = sin(hvPan.x) * M;
    float zCoord = (cos(hvPan.x) * M) - d;

    float S = (d + 1) / (d + zCoord);

    float yCoord = lerp(hvPan.y / S, zCoord * hvPan.y, verticalCompression);
        //lerp(tan(hv.y) / S, zCoord * hv.y / S, verticalCompression);


    vec3 dir = normalize(vec3(xCoord, -yCoord, -zCoord));

    eyeRay.origin = camera.frame * vec4(0, 0, 0, 1);
    eyeRay.direction = camera.frame * vec4(dir, 0);

#else
    vec2 halfFragCoordExtent = vec2(g3d_FragCoordExtent / 2.0);
    vec2 pixelCenterCoords = vec2(gl_GlobalInvocationID.xy) + vec2(0.5f) - (halfFragCoordExtent);

    pixelCenterCoords /= halfFragCoordExtent.x;

    // Pixel center coords go from ( [-1, 1], [-y/x, y/x]

    float halfFOV = (FOVRadians / 2.0);
    float d = csProjectionOffset;

    float S0 = (d + 1.0f) / (d + cos(halfFOV));

    pixelCenterCoords *= S0 * sin(halfFOV);

    //float tanHalfFov = tan(halfFOV);
    //
    //float aspectRatio = g3d_FragCoordExtent.x / g3d_FragCoordExtent.y;

    //pixelCenterCoords *= vec2(halfFOV, halfFOV / aspectRatio);

    float h = pixelCenterCoords.x;
    float v = pixelCenterCoords.y;// *(2.425f); // Experiments to get vertical FOV the same.

    float k = square(h / (d + 1.0));

    float delta = square(k * d) - (k + 1.0) * (k * square(d) - 1.0);

    float cosPhi = (-k * d + sqrt(delta)) / (k + 1.0);

    float S = (d + 1.0f) / (d + cosPhi);

    float tanTheta = lerp(v / S, v * cosPhi, verticalCompression);
    float sinPhi = sqrt(1 - square(cosPhi));

    sinPhi *= sign(h);

    vec3 dir = normalize(vec3(sinPhi, -tanTheta, -cosPhi));

    eyeRay.origin = camera.frame * vec4(0, 0, 0, 1);
    eyeRay.direction = camera.frame * vec4(dir, 0);
#endif

#   elif PROJECTION_ALGORITHM == OCTAHEDRAL

    int dim = int(g3d_FragCoordExtent.y);

    int Xoffset = (int(g3d_FragCoordExtent.x) - int(dim)) / 2;
    int Yoffset = (int(g3d_FragCoordExtent.y) - int(dim)) / 2;
    int x = int(gl_GlobalInvocationID.x) - Xoffset;
    int y = int(gl_GlobalInvocationID.y) - Yoffset;
    if (x > dim || x < 0) {
        return;
    }
    if (y > dim || y < 0) {
        return;
    }

    float octX = (float(x) - (float(dim) / 2.0f)) / (float(dim) / 2.0f);
    float octY = (float(y) - (float(dim) / 2.0f)) / (float(dim) / 2.0f);

    vec3 octDir = octDecode(vec2(octX, octY));

    eyeRay.origin = camera.frame[3];
    eyeRay.direction = mat3x3(camera.frame) * normalize(vec3(octDir.x, -octDir.y, -octDir.z));
#elif PROJECTION_ALGORITHM == THIN_LENS

    Ray CSRay = cameraRay(gl_GlobalInvocationID.xy, camera.projInfo);

    vec2 uv = texture(g3d_uniformRandom, (mod(vec2(gl_GlobalInvocationID.xy) / g3d_FragCoordExtent + lensPoint, 1.0f))).xy;

    // Re-map to disk
    float angle = uv.x * 2.0 * pi;
    float radius = uv.y;

    float u = cos(angle) * sqrt(radius);
    float v = sin(angle) * sqrt(radius);

    // Simplified from Camera.cpp.
    //vec3 focusPoint = CSRay.direction * (-focusPlaneZ / dot(CSRay.direction, vec3(0,0,-1)));

    // Second parametrization
    float focusPlane = (camToLens * focalLength) / (camToLens - focalLength);
    vec3 focusPoint = CSRay.direction * (focusPlane / dot(CSRay.direction, vec3(0, 0, -1)));
    float circleOfConfusionRadius = focalLength / (2.0f * fStop);

    vec3 origin = vec3(1, 0, 0) * (u * circleOfConfusionRadius) + vec3(0, 1, 0) * (v * circleOfConfusionRadius);

    vec3 direction = normalize(focusPoint - origin);

    eyeRay.origin = camera.frame * vec4(origin, 1);
    eyeRay.direction = mat3x3(camera.frame) * (direction);
#elif PROJECTION_ALGORITHM == CUBE_MAP // cube map


    ////////// HACK TO VISUALIZE CUBE MAP //////////
    const float NUM_LENSES = 6;
    const float BASELINE = 8;
    vec2 unitCoord = (gl_GlobalInvocationID.xy - g3d_FragCoordExtent / 2) / length(g3d_FragCoordExtent);
    float2 lensCenter = round(unitCoord * NUM_LENSES) / NUM_LENSES;
    float2 lensCoord = (unitCoord - lensCenter) * NUM_LENSES;


    vec3 axis;
    vec2 signVec = vec2(1);

    if (lensCenter.x == 0.0f && lensCenter.y == 0.0f) {
        axis = vec3(0, 0, -1);
        signVec = vec2(1, -1);
    }
    else if (lensCenter.y > 0.0f) {
        axis = vec3(0, -1, 0);
    }
    else if (lensCenter.y < 0.0f) {
        axis = vec3(0, 1, 0);
        signVec = vec2(1, -1);
    }
    else if (lensCenter.x > 0.0f) {
        axis = vec3(1, 0, 0);
        float t = lensCoord.x;
        lensCoord.x = lensCoord.y;
        lensCoord.y = t;
        signVec = vec2(-1, 1);
    }
    else if (lensCenter.x > -0.25f) {
        axis = vec3(-1, 0, 0);
        float t = lensCoord.x;
        lensCoord.x = lensCoord.y;
        lensCoord.y = t;
        signVec = vec2(-1, -1);
    } else {
        axis = vec3(0, 0, 1);
        signVec = vec2(-1);
    }

    if (lensCenter.x > 0.25f || lensCenter.x < -0.45f) {
        maxDist = -1;
    }

    if ((abs(lensCenter.x) > 0.0f && abs(lensCenter.y) > 0.0f) || abs(lensCenter.y) > 0.25f) {
        maxDist = -1;
    }

    ////////// HACK TO VISUALIZE CUBE MAP //////////

    vec3 dir = generateCSCubeMapDirection(axis, lensCoord * signVec, vec2(1));

    eyeRay.direction = camera.frame * vec4(dir, 0);
    eyeRay.origin = camera.frame[3];

#else  // orthographic

    vec3 position = reconstructCSPosition(vec2(gl_GlobalInvocationID.xy) + pixelOffset, -1.0, camera.projInfo);

    eyeRay.origin = camera.frame * vec4(position.xy * FOVDistance, 0, 1);
    eyeRay.direction = camera.frame * vec4(0, 0, -1, 0);

#   endif

    imageStore(rayOrigin,    coord, vec4(eyeRay.origin, 0.0f));
    imageStore(rayDirection, coord, vec4(eyeRay.direction, maxDist));
}
